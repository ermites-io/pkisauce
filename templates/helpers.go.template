//go:build go1.17
// +build go1.17
//
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// THIS FILE IS GENERATED BY PkiSauce! DO NOT EDIT!
// {{ $date := .Time }} {{ $name := .HName }} {{ $human_name := .Name }} {{ $server := .Server }} {{ $client := .Client }} {{ $client_uuid := .ClientUUID }} {{ $flavor := .Flavor }} {{ $to := .Servers }} {{ $policy_blob := .PolicyBlob }} {{ $pki_blob := .PkiBlob }} 
// Generated: {{ $date }}
// Match: {{ $human_name }} -> {{ $name }}

/*
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2020 Eric Aug√© <eau [plus] pkisauce [a.t.] unix4fun [D.O.T] net> as Ermites.IO
 * All rights reserved.
 * 
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package main

import (
	"crypto/sha256"
{{ if (and (eq $flavor 2) $server) }}
	"context"
{{end}}
{{ if $server }}
	"fmt"
	"crypto/x509"
{{ end }}
{{ if (or $server $client) }}
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
{{ end }}
{{ if (and (eq $flavor 2) $server) }}
	"google.golang.org/grpc/peer"
{{end}}
	"golang.org/x/crypto/hkdf"
)

const ( {{ if $server }}
	pkscPolicyBlob_{{ $human_name }}  = "{{ $policy_blob }}" 
	{{ end }}
	pkscPkiBlob_{{ $human_name }} = "{{ $pki_blob }}"
	pkscNodeKey_{{ $human_name }} = "{{ .Key }}"
)

var (
	pkscDebugLog_{{ $name }} = {{ .DebugLog }}
	pkscPki_{{ $human_name }} NodePkiInfo
{{ if $server }}
	pkscPolicy_{{ $human_name }} Hosts
	pkscWc_{{ $human_name }} string
	//pkscPH_{{ $human_name }} *Hasher
	pkscPHk_{{ $human_name }} []byte
{{ end }}
{{ if $client }}
	pkscGrpcOptTlsClient_{{ $human_name }} = GrpcDialoptFuncMap{ {{ range $touuid, $toni := $to }}
				"{{ $toni.Name }}": pkscGrpcOptTlsClient_{{ $name }}{{ $toni.HName }},{{end}}
	}
{{ end }}
)

func pkscInit_{{ $human_name }}(params ...string) (err error) {
	nodeKey := pkscNodeKey_{{ $human_name}}
	pkiBlob := pkscPkiBlob_{{ $human_name }}
{{ if $server }}
	polBlob := pkscPolicyBlob_{{ $human_name }}
{{ end }}

{{ if $server }}
	if len(params) > 0  && len(params) == 3 {
		nodeKey = params[0]
		pkiBlob = params[1]
		polBlob = params[2]
	}
{{ else }}
	if len(params) > 0  && len(params) == 2 {
		nodeKey = params[0]
		pkiBlob = params[1]
	}
{{ end }}


	// here we get the salt + key for hkdf
	lk, err := pkscb64.DecodeString(nodeKey)
	if err != nil {
		return
	}

	ihname := sha256.Sum256([]byte("{{ $human_name }}"))
	ihk64 := sha256.Sum256([]byte(nodeKey))

	info := ihname[:]
	info = append(info, ihk64[:]...)


	krdr := hkdf.New(sha256.New, lk[32:64], lk[0:32], info)

	k1 := make([]byte, 32)
	_, err = krdr.Read(k1)
	if err != nil {
		return
	}

	ad := ihk64[:]
	ad = append(ad, ihname[:]...)

	if len(pkscPki_{{ $human_name }}) == 0 {
		pkscPki_{{ $human_name }} = make(NodePkiInfo)
		err = Unmarshal(k1, ad, pkiBlob, &pkscPki_{{ $human_name }})
		if err != nil {
			return
		}
	}

{{ if $server }}

	k2 := make ([]byte, 32)
	_, err = krdr.Read(k2)
	if err != nil {
		return
	}

	if len(polBlob) > 0 && len(pkscPolicy_{{ $human_name }}) == 0 {
		pkscPolicy_{{ $human_name }} = make(Hosts)

		// build ad
		adh := sha256.New()

		adhca := sha256.Sum256([]byte(pkscPki_{{ $human_name }}["ca"]))
		adh.Write(adhca[:])
		adhsc := sha256.Sum256([]byte(pkscPki_{{ $human_name }}["sc"]))
		adh.Write(adhsc[:])
		adhsk := sha256.Sum256([]byte(pkscPki_{{ $human_name }}["sk"]))
		adh.Write(adhsk[:])
		adhcc := sha256.Sum256([]byte(pkscPki_{{ $human_name }}["cc"]))
		adh.Write(adhcc[:])
		adhck := sha256.Sum256([]byte(pkscPki_{{ $human_name }}["ck"]))
		adh.Write(adhck[:])

		ad := adh.Sum(nil)

		err = Unmarshal(k2, ad, polBlob, &pkscPolicy_{{ $human_name }})
		if err != nil {
			return
		}
	}

	// XXX prepare PH for wc only and create the required wc.
	//k3 := make ([]byte, 32)
	pkscPHk_{{ $human_name }} = make ([]byte, 32)
	_, err = krdr.Read(pkscPHk_{{ $human_name }})
	if err != nil {
		return
	}
	//pkscPH_{{ $human_name }} = NewHasher(k3)
	//pkscWc_{{ $human_name }} = pkscPH_{{ $human_name }}.Sum64([]byte(wc))
	hr := NewHasher(pkscPHk_{{ $human_name }})
	pkscWc_{{ $human_name }} = hr.Sum64([]byte(wc))
{{ end }}

	return
}

{{ if $server }}
//
//
// Server Helper Functions
// HOST: {{ $human_name }} ==> {{ $name }}
//
//

func pkscVerifyPeerCertSrv_{{ $name }}(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error {
	rules := pkscPolicy_{{ $human_name }}
	hr := NewHasher(pkscPHk_{{ $human_name }})

	if len(rawCerts) == 0 || len(verifiedChains) == 0 {
		return ErrPkscAuthz
	}

	peercert, err := x509.ParseCertificate(rawCerts[0])
	if err != nil {
		return err
	}

	//phTlsPeerIdentity := pkscPH_{{ $human_name }}.Sum64([]byte(peercert.Subject.CommonName))
	phTlsPeerIdentity := hr.Sum64([]byte(peercert.Subject.CommonName))
	rc := rules.isHostAuthorized(pkscWc_{{ $human_name }}, phTlsPeerIdentity)
	if !rc {
		return ErrPkscAuthz
	}

	return nil

}

func pkscGrpcOptTlsServer_{{ $human_name }}(params ...string) (opt grpc.ServerOption, err error) {
	err = pkscInit_{{ $human_name }}(params...)
	if err != nil {
		return
	}

	tlsConfig, err := pkscTlsServConfig(pkscPki_{{ $human_name }}["ca"], 
		pkscPki_{{ $human_name }}["sc"], 
		pkscPki_{{ $human_name }}["sk"], pkscVerifyPeerCertSrv_{{ $name }})
	if err != nil {
		return
	}

	tlscreds := credentials.NewTLS(tlsConfig)
	opt = grpc.Creds(tlscreds)


	return
}

{{ if (and (eq $flavor 2) $server) }}
// package names: https://golang.org/ref/spec#Packages
// service names: To check on GRPC specs
// method name: defined as a function name in Go. (need to check c++ & java)
func pkscInterceptor_{{ $human_name }}(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {

	// the host is defined in var, nil first, but 
	// depacked as soon as a call to the pkcsGrpcOptTlsServer
	rules := pkscPolicy_{{ $human_name }}
	// hasher
	hr := NewHasher(pkscPHk_{{ $human_name }})

	grpcClient, ok := peer.FromContext(ctx)
	if !ok {
		return nil, ErrPkscGrpcAuthz
	}

	tlsPeerInfo, ok := grpcClient.AuthInfo.(credentials.TLSInfo)
	if !ok {
		return nil, ErrPkscGrpcAuthz
	}

	if len(tlsPeerInfo.State.PeerCertificates) == 0 {
		return nil, ErrPkscGrpcAuthz
	}

	tlsPeerIdentity := tlsPeerInfo.State.PeerCertificates[0].Subject.CommonName

	// INFO: get pkg, svc, call
	if pkscDebugLog_{{ $name }} {
		fmt.Printf("interceptor call: %s info.Server: %T\n", info.FullMethod, info.Server)
	}
	pkg, svc, call, err := parseGrpcMethod(info.FullMethod)
	if err != nil {
		return nil, ErrPkscGrpcAuthz
	}

	phTlsPeerIdentity := hr.Sum64([]byte(tlsPeerIdentity))
	phSvc := hr.Sum64([]byte(svc))
	phCall := hr.Sum64([]byte(call))

	rc := rules.isCallAuthorized(pkscWc_{{ $human_name }}, phTlsPeerIdentity, phSvc, phCall)
	if !rc {
		return nil, ErrPkscGrpcAuthz
	}

	if pkscDebugLog_{{ $name }} {
		// XXX replace by log
		fmt.Printf("cn: %s pkg: %s svc: %s call: %s -> rc: %v\n", tlsPeerIdentity, pkg, svc, call, rc)
	}
	return handler(ctx, req)
}

func pkscGrpcOptInterceptor_{{ $human_name }}() (opt grpc.ServerOption) {
	opt = grpc.UnaryInterceptor(pkscInterceptor_{{ $human_name }})
	return
}
{{ end }}{{ end }}
{{ if $client }}
//
//
// Client Helper Functions
// HOST: {{ $human_name }} ==> {{ $name }}
//
// {{ range $touuid, $toni := $to }}
//
// From: {{ $human_name }}  =>  To: {{ $toni.Name }} 
// From: {{ $client_uuid }}  => {{ $toni.UUID }} 
// Function suffix: {{ $name }}{{ $toni.HName }}
//
//
// Helper functions..
func pkscGrpcOptTlsClient_{{ $name }}{{ $toni.HName }}(params ...string) (opt grpc.DialOption, err error) {
	err = pkscInit_{{ $human_name }}(params...)
	if err != nil {
		return
	}

	tlsConfig, err := pkscTlsClientConfig(pkscPki_{{ $human_name }}["ca"], 
		pkscPki_{{ $human_name }}["cc"],
		pkscPki_{{ $human_name }}["ck"],
		"{{ $toni.UUID }}", nil)
	if err != nil {
		return
	}

        tlscreds := credentials.NewTLS(tlsConfig)
	opt = grpc.WithTransportCredentials(tlscreds)
	return
}
{{end}}
{{ end }}
